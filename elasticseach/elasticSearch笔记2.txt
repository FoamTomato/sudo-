## 前言

在以前，一个网站的完成总是“all in one”，页面，数据，渲染全部在服务端完成，这样做的最大的弊端是后期维护，扩展极其痛苦，开发人员必须同时具备前后端知识。于是慢慢的后来兴起了`前后端分离`的思想：
 后端负责`数据编造`,而前端则负责`数据渲染`，前端静态页面调用指定api获取到有固定格式的数据，再将数据展示出来，这样呈现给用户的就是一个”动态“的过程，而关于api这部分的设计则成了一个问题。如何设计出一个便于理解，容易使用的api则成了一个问题。
 而所谓的`restful`就是用来规范我们的api的一种约束。

## 介绍

`rest`是`REpresentational State Transfer`三个单词的缩写，由Roy Fielding于2000年论文中提出，它代表着分布式服务的架构风格。而如果想你的api被称为restful api，只要遵循其规定的约束即可。

## rest设计原则

1. 客户端-服务器：通过将用户UI与数据存储分开，我们可以简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。 它可以比表现成前后端分离的思想。
2. 无状态：从客户端到服务器的每个请求都必须包含理解请求所需的所有信息，并且不能利用服务器上任何存储的上下文。 这表示你应该尽可能的避免使用session，由客户端自己标识会话状态。（token）
3. 规范接口：REST接口约束定义：资源识别; 请求动作; 响应信息; 它表示通过uri标出你要操作的`资源`，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。
4. 可缓存： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示get请求响应头中应该表示有是否可缓存的头（Cache-Control)
    其中1，2，3约束最为重要，其中1容易理解。接下来我们就谈谈无状态和规范接口的原则。

### uri规范

资源的描述构成了uri，它一般有以下约束：

1. 使用名词。如 user, student, class
    http://api.example.com/class-management/students
    http://api.example.com/device-management/managed-devices/{device-id}
    http://api.example.com/user-management/users/
    http://api.example.com/user-management/users/{id}
2. http method对应不同的请求动作（数据库或者业务逻辑）
    `GET`：查询操作：
    HTTP GET /devices?startIndex=0&size=20
    HTTP GET /configurations?startIndex=0&size=20
    HTTP GET /devices/{id}/configurations
    HTTP GET /devices/{id}
    `POST`：新增操作：
    HTTP POST /device
    `PUT` 更新操作（代表更新一个实体的所有属性）
    HTTP PUT /devices/{id}
    `PATCH` 部分更新（代表更新一个尸体的部分属性）由于有的浏览器兼容性问题，一般推荐使用put
    HTTP PATCH /devices/{id}
    `DELETE` 删除操作
    HTTP DELETE /devices/{id}
3. 使用连字符（ - ）而不是（_）来提高URI的可读性
    http://api.example.com/inventory-management/managed-entities/{id}/install-script-location //更易读
    http://api.example.com/inventory_management/managed_entities/{id}/install_script_location //更容易出错
4. 在URI中使用小写字母
    http://api.example.org/my-folder/my-doc
5. 不要使用文件扩展名 文件扩展名看起来很糟糕，不会增加任何优势。删除它们也会减少URI的长度。没理由保留它们。
    http://api.example.com/device-management/managed-devices.xml / *不要使用它* /
    http://api.example.com/device-management/managed-devices / *这是正确的URI * /
6. 使用查询组件过滤URI集合
    很多时候，我们会遇到需要根据某些特定资源属性对需要排序，过滤或限制的资源集合的要求。为此，请不要创建新的API - 而是在资源集合API中启用排序，过滤和分页功能，并将输入参数作为查询参数传递。例如
    http://api.example.com/device-management/managed-devices
    http://api.example.com/device-management/managed-devices?region=USA
    http://api.example.com/device-management/managed-devices?region=USA&brand=XYZ
    http://api.example.com/device-management/managed-devices?region=USA&brand=XYZ&sort=installation-date
7. 不要在末尾使用`/`
    作为URI路径中的最后一个字符，正斜杠（/）不会添加语义值，并可能导致混淆。最好完全放弃它们。
8. 使用http状态码定义api执行结果
    **1xx：信息**
    通信传输协议级信息。

**2xx：成功**
 表示客户端的请求已成功接受。

**3xx：重定向**
 表示客户端必须执行一些其他操作才能完成其请求。

**4xx：客户端错误**
 此类错误状态代码指向客户端。

**5xx：服务器错误**
 服务器负责这些错误状态代码。
 另外完整的更为详细的状态码此处不做赘述。一般简化版本的api会使用200，400，500，其中400代表客户端调用有误，将错误信息放入response：



```json
{
  "error": "username.or.password.error"
}
```

1. api版本定义
    当我们需要对现有的api接口升级的时候，因为该api接口已经投入使用，所以新添加的业务可能无法保证兼容原来的逻辑，这个时候就需要新的接口，而这个接口一般表示对原来的接口的升级（不同版本），那版本怎么定义呢？

- URI版本控制（推荐）
   http://api.example.com/v1
   http://apiv1.example.com
- 使用自定义请求标头进行版本控制
   Accept-version：v1
   Accept-version：v2
- 使用Accept header 进行版本控制
   Accept:application / vnd.example.v1 + json
   Accept:application / vnd.example + json; version = 1.0

### 无状态

使REST API无状态有一些非常显着的优点：

1. 无状态通过将API部署到多个服务器，有助于将API扩展到数百万并发用户。任何服务器都可以处理任何请求，因为没有与会话相关的依赖。（集群）
2. 无状态使得REST API不那么复杂 - 可以删除所有服务器端状态同步逻辑。（删除session，清理多余空间）
3. 无状态API也很容易缓存。特定软件可以通过查看该一个请求来决定是否缓存HTTP请求的结果。从先前的请求中获得的状态可能会影响这个请求的可缓存性，这并不存在任何不确定性。它提高了应用程序的性能。
4. 服务器永远不会忘记每个客户端身份”，因为客户端会在每个请求中发送所有必要的信息。（携带token）

那么无状态又要怎么实现呢？前面我们已经说了，服务端不应该再保存session会话，这个工作全部交由http请求去标识，而最常见的做法则是使用token。生成token可以考虑使用jwt，oauth。

# RESTful API是什么？

![img](https://upload-images.jianshu.io/upload_images/13880937-1e29f65e315ca7da.gif?imageMogr2/auto-orient/strip|imageView2/2/w/672/format/webp)

restful.gif

要弄清楚什么是RESTful API，首先要知道REST是什么。

> REST，表示性状态转移（representation state transfer）。简单来说，就是用`URI`表示资源，用HTTP方法(GET, POST, PUT, DELETE)表征对这些资源的操作。

- Resource: 资源，即数据，存在互联网上的可被访问的实体
- Representation： 数据的某种表现形式，如HTML, JSON。
- State Transfer：状态变化，HTTP方法实现

RESTful API 就是REST风格的API。现在终端平台多样，移动、平板、PC等许多媒介向服务端发送请求后，如果不适用RESTful API，需要为每个平台的数据请求定义相应的返回格式，以适应前端显示。但是RESTful API 要求前端以一种预定义的语法格式发送请求，那么服务端就只需要定义一个统一的响应接口，不必像之前那样解析各色各式的请求。

RESTful 是典型的基于HTTP的协议。它有哪些设计原则和规范呢？

1. 资源。首先要明确资源就是网络上的一个实体，可以是文本、图片、音频、视频。资源总是以一定的格式来表现自己。文本用txt、html；图片用JPG、JPEG等等。而JSON是RESTful API中最常用的资源表现格式。

2. 统一接口。对于业务数据的CRUD，RESTful 用HTTP方法与之对应。

   ![img](https://upload-images.jianshu.io/upload_images/13880937-18695122bde092bd.png?imageMogr2/auto-orient/strip|imageView2/2/w/509/format/webp)

   URI。统一资源标识符，它可以唯一标识一个资源。注意到，URL(统一资源定位符)是一种URI，因为它可以唯一标志资源。但**URL != URI**。应该说URL 是URI的子集。因为URL使用路径来唯一标识资源，这只是唯一标识资源的一种方式。还可以用一个唯一编号来标识资源，如example.html.**fuce2da23**。只不过这种方式并不被广泛使用。总之，要在概念上对URL和URI有所区分。

3. 无状态。 所谓无状态是指所有资源都可以用URI定位，而且这个定位与其他资源无关，不会因为其他资源的变动而变化。这里引入一个**幂等性**的概念：无论一个操作被执行一次还是多次，执行后的效果都相同。比如对某资源发送GET请求，如果访问一次和访问十次获得的数据一样，那么就说这个请求具有幂等性。

4. URL中只能有名词，不能出现动词。这是因为在REST要求对资源的操作由HTTP 方法给出，而方法是由HTTP 请求报文头部给出的，自然不需要在URL中暴露操作方式。

还有一些属于业务决定型规则，比如应该将版本加到URL中，对返回记录进行限制过滤。不是强制的，但是比较建议这么做。